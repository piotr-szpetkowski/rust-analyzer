initSidebarItems({"enum":[["AdtId","A Data Type"],["AssocItemId",""],["ContainerId",""],["DefWithBodyId","The defs which have a body."],["GenericDefId",""],["ModuleDefId","The defs which can be visible in the module."],["ModuleSource",""],["VariantId",""]],"mod":[["adt","Defines hir-level representation of structs, enums and unions"],["attr","A higher level attributes based on TokenTree, with also some shortcuts."],["body","FIXME: write short doc here"],["builtin_type","This module defines built-in types."],["db","Defines database & queries for name resolution."],["diagnostics","Diagnostics produced by `hir_def`."],["expr","This module describes hir-level representation of expressions."],["generics","Many kinds of items or constructs can have generic parameters: functions, structs, impls, traits, etc. This module provides a common HIR for these generic parameters. See also the `Generics` type and the `generics_of` query in rustc."],["impls","Defines hir-level representation of impls."],["nameres","This module implements import-resolution/macro expansion algorithm."],["path","FIXME: write short doc here"],["resolver","Name resolution fa√ßade."],["traits","HIR for trait definitions."],["type_ref","HIR for references to types. Paths in these are not yet resolved. They can be directly created from an ast::TypeRef, without further queries."]],"struct":[["ConstId",""],["ConstLoc",""],["CrateModuleId","An ID of a module, local to a specific crate"],["EnumId",""],["EnumVariantId",""],["FunctionId",""],["FunctionLoc",""],["ImplId",""],["ItemLoc",""],["LocalEnumVariantId",""],["LocalStructFieldId",""],["LocationCtx",""],["ModuleId",""],["StaticId",""],["StructFieldId",""],["StructId",""],["StructOrUnionId",""],["TraitId",""],["TypeAliasId",""],["TypeAliasLoc",""],["UnionId",""]],"trait":[["AstItemDef",""],["HasModule",""],["HasSource",""],["Lookup",""]]});